import 'dart:convert';
import 'dart:io';

import 'package:path/path.dart' as p;
import 'package:yaml/yaml.dart';

// ignore_for_file: avoid_dynamic_calls
// ignore_for_file: avoid_print

Future<void> main() async {
  print('Generating index_generator.yaml');
  final libDirectory = Directory('lib');
  final subpackFiles = [
    await for (final file in libDirectory.list(recursive: true))
      if (file is File && p.basename(file.path) == 'subpack.yaml') file,
  ];
  final indexGeneratorYamlBaseFile = File('tool/index_generator_base.yaml');
  /* TODO(lzuttermeister): We encode and decode as a hack to get a mutable
       map. Improve this. */
  final indexGeneratorYaml = jsonDecode(
    jsonEncode(
      loadYaml(
        await indexGeneratorYamlBaseFile.readAsString(),
      ),
    ),
  );
  final indexes = indexGeneratorYaml['index_generator']['indexes'];
  for (final subpackFile in subpackFiles) {
    final subpackagePath = p.dirname(subpackFile.path);
    final subpackYaml =
        loadYaml(await subpackFile.readAsString()) ?? <String, dynamic>{};
    final index = subpackYaml['index'] ?? <String, dynamic>{};
    final subpackageName = index['name'] ?? p.basename(subpackagePath);
    final docs = index['docs'] ?? 'Generated using index_generator package.\n';
    final exclude =
        (index['exclude'] as List<dynamic>?)?.cast<String>() ?? <String>[];
    indexes.add(
      {
        'path': subpackagePath,
        'name': subpackageName,
        'library': '',
        'docs': docs,
        'include': [
          'src/**',
        ],
        'exclude': [
          '**.g.dart',
          '**.part.dart',
          '**/_*/**',
          '**/src/**',
          ...exclude,
        ],
      },
    );
  }
  final indexGeneratorYamlFile = File('index_generator.yaml');
  await indexGeneratorYamlFile.writeAsString(
    [
      '# AUTOGENERATED FILE - DO NOT MODIFY BY HAND',
      const JsonEncoder.withIndent('  ').convert(indexGeneratorYaml),
      '\n',
    ].join('\n'),
  );
  print('index_generator.yaml generated');
}
